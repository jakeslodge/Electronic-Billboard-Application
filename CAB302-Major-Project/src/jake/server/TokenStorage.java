package jake.server;

import java.time.Duration;
import java.time.LocalDateTime;

public class TokenStorage {
    private static TokenStorage[] TokenArray = new TokenStorage[30]; //Array for token storage
    private String username;
    private String token;
    private LocalDateTime sessionExp;

    /**
     * Object creation that is then stored inside the TokenStorage Array
     * @param Username - Users username
     * @param Token - The token generated by the server for validation
     * @param SessionExp - The time that the token has been created
     */
    public TokenStorage(String Username, String Token, LocalDateTime SessionExp) {
        username = Username;
        token = Token;
        sessionExp = SessionExp;
    }

    /**
     * Function that sorts through an array looking for an empty spot to store the latest Token object
     * @param TokenObj - Object containing: Username, Token, Time created
     */
    public static void StoreToken(TokenStorage TokenObj) {
        for (int i = 0; i < TokenArray.length; i++) {
            if (TokenArray[i] != null) {
            } else {
                TokenArray[i] = TokenObj;
                break;
            }
        }
    }

    /**
     * ValidateToken() searched through the array of token objects and decides if the token that is being sent
     * Is valid by checking if it is within 24 hours of token creation
     * @param Token - Sent by user trying to perform an action
     * @return Returns boolean to say if the token is valid or not
     */
    public static Boolean ValidateToken(String Token) {
        for (int i = 0; i < TokenArray.length-1; i++) {
            if (TokenArray[i].token.equals(Token)) {
                LocalDateTime timeNow = LocalDateTime.now();
                if (CompareDateTime(TokenArray[i].sessionExp, timeNow)) {
                    return true;
                }
                return false;
            }
        }
        return false;
    }

    /**
     * Helper function used to do the time comparison and check if the token that the user is using is valid (<24 hours old)
     * @param StoredToken - The token stored within the TokenStorage Array
     * @param UserCurrentDateTime - The current time that the user is attempting to perform the action
     * @return boolean to signify if the date time is within 24 hours or not
     */
    private static Boolean CompareDateTime(LocalDateTime StoredToken, LocalDateTime UserCurrentDateTime) {
        Duration expiryTime = Duration.ofHours(24);
        Duration duration = Duration.between(StoredToken, UserCurrentDateTime);
        if (duration.toHours() < expiryTime.toHours()) {
            return true;
        }
        return false;
    }

    /**
     * Function used when the client logs out. The Token object associated with the client is removed to prevent futher unauthorized use of the token.
     * @param token - Token associated with the client
     */
    public static void ExpireToken(String token)
    {
        for (int i = 0; i < TokenArray.length-1; i++) {
            if (TokenArray[i].token.equals(token))
            {
                TokenArray[i] = null;
                break;
            }
        }
    }
}